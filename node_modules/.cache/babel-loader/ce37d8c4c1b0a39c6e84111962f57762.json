{"ast":null,"code":"\"use strict\";\n\nvar initBuffer = require(\"./init-buffer\");\n\nif (!Buffer.prototype.indexOf) {\n  Buffer.prototype.indexOf = function (value, offset) {\n    offset = offset || 0; // Always wrap the input as a Buffer so that this method will support any\n    // data type such as array octet, string or buffer.\n\n    if (typeof value === \"string\" || value instanceof String) {\n      value = initBuffer(value);\n    } else if (typeof value === \"number\" || value instanceof Number) {\n      value = initBuffer([value]);\n    }\n\n    var len = value.length;\n\n    for (var i = offset; i <= this.length - len; i++) {\n      var mismatch = false;\n\n      for (var j = 0; j < len; j++) {\n        if (this[i + j] != value[j]) {\n          mismatch = true;\n          break;\n        }\n      }\n\n      if (!mismatch) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n}\n\nfunction bufferLastIndexOf(value, offset) {\n  // Always wrap the input as a Buffer so that this method will support any\n  // data type such as array octet, string or buffer.\n  if (typeof value === \"string\" || value instanceof String) {\n    value = initBuffer(value);\n  } else if (typeof value === \"number\" || value instanceof Number) {\n    value = initBuffer([value]);\n  }\n\n  var len = value.length;\n  offset = offset || this.length - len;\n\n  for (var i = offset; i >= 0; i--) {\n    var mismatch = false;\n\n    for (var j = 0; j < len; j++) {\n      if (this[i + j] != value[j]) {\n        mismatch = true;\n        break;\n      }\n    }\n\n    if (!mismatch) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nif (Buffer.prototype.lastIndexOf) {\n  // check Buffer#lastIndexOf is usable: https://github.com/nodejs/node/issues/4604\n  if (initBuffer(\"ABC\").lastIndexOf(\"ABC\") === -1) Buffer.prototype.lastIndexOf = bufferLastIndexOf;\n} else {\n  Buffer.prototype.lastIndexOf = bufferLastIndexOf;\n}","map":null,"metadata":{},"sourceType":"script"}