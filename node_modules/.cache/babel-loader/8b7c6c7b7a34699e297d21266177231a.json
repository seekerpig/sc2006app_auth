{"ast":null,"code":"var fs = require('graceful-fs');\n\nvar Promise = require('bluebird');\n\nvar directory = require('./directory');\n\nvar Stream = require('stream'); // Backwards compatibility for node versions < 8\n\n\nif (!Stream.Writable || !Stream.Writable.prototype.destroy) Stream = require('readable-stream');\nmodule.exports = {\n  buffer: function buffer(_buffer, options) {\n    var source = {\n      stream: function stream(offset, length) {\n        var stream = Stream.PassThrough();\n        stream.end(_buffer.slice(offset, length));\n        return stream;\n      },\n      size: function size() {\n        return Promise.resolve(_buffer.length);\n      }\n    };\n    return directory(source, options);\n  },\n  file: function file(filename, options) {\n    var source = {\n      stream: function stream(offset, length) {\n        return fs.createReadStream(filename, {\n          start: offset,\n          end: length && offset + length\n        });\n      },\n      size: function size() {\n        return new Promise(function (resolve, reject) {\n          fs.stat(filename, function (err, d) {\n            if (err) reject(err);else resolve(d.size);\n          });\n        });\n      }\n    };\n    return directory(source, options);\n  },\n  url: function url(request, params, options) {\n    if (typeof params === 'string') params = {\n      url: params\n    };\n    if (!params.url) throw 'URL missing';\n    params.headers = params.headers || {};\n    var source = {\n      stream: function stream(offset, length) {\n        var options = Object.create(params);\n        options.headers = Object.create(params.headers);\n        options.headers.range = 'bytes=' + offset + '-' + (length ? length : '');\n        return request(options);\n      },\n      size: function size() {\n        return new Promise(function (resolve, reject) {\n          var req = request(params);\n          req.on('response', function (d) {\n            req.abort();\n            if (!d.headers['content-length']) reject(new Error('Missing content length header'));else resolve(d.headers['content-length']);\n          }).on('error', reject);\n        });\n      }\n    };\n    return directory(source, options);\n  },\n  s3: function s3(client, params, options) {\n    var source = {\n      size: function size() {\n        return new Promise(function (resolve, reject) {\n          client.headObject(params, function (err, d) {\n            if (err) reject(err);else resolve(d.ContentLength);\n          });\n        });\n      },\n      stream: function stream(offset, length) {\n        var d = {};\n\n        for (var key in params) {\n          d[key] = params[key];\n        }\n\n        d.Range = 'bytes=' + offset + '-' + (length ? length : '');\n        return client.getObject(d).createReadStream();\n      }\n    };\n    return directory(source, options);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}