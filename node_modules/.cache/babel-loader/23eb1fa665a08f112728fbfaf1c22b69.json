{"ast":null,"code":"var bigInt = require('big-integer');\n\nvar Stream = require('stream'); // Backwards compatibility for node versions < 8\n\n\nif (!Stream.Writable || !Stream.Writable.prototype.destroy) Stream = require('readable-stream');\nvar table;\n\nfunction generateTable() {\n  var poly = 0xEDB88320,\n      c,\n      n,\n      k;\n  table = [];\n\n  for (n = 0; n < 256; n++) {\n    c = n;\n\n    for (k = 0; k < 8; k++) {\n      c = c & 1 ? poly ^ c >>> 1 : c = c >>> 1;\n    }\n\n    table[n] = c >>> 0;\n  }\n}\n\nfunction crc(ch, crc) {\n  if (!table) generateTable();\n  if (ch.charCodeAt) ch = ch.charCodeAt(0);\n  return bigInt(crc).shiftRight(8).and(0xffffff).xor(table[bigInt(crc).xor(ch).and(0xff)]).value;\n}\n\nfunction Decrypt() {\n  if (!(this instanceof Decrypt)) return new Decrypt();\n  this.key0 = 305419896;\n  this.key1 = 591751049;\n  this.key2 = 878082192;\n}\n\nDecrypt.prototype.update = function (h) {\n  this.key0 = crc(h, this.key0);\n  this.key1 = bigInt(this.key0).and(255).and(4294967295).add(this.key1);\n  this.key1 = bigInt(this.key1).multiply(134775813).add(1).and(4294967295).value;\n  this.key2 = crc(bigInt(this.key1).shiftRight(24).and(255), this.key2);\n};\n\nDecrypt.prototype.decryptByte = function (c) {\n  var k = bigInt(this.key2).or(2);\n  c = c ^ bigInt(k).multiply(bigInt(k ^ 1)).shiftRight(8).and(255);\n  this.update(c);\n  return c;\n};\n\nDecrypt.prototype.stream = function () {\n  var stream = Stream.Transform(),\n      self = this;\n\n  stream._transform = function (d, e, cb) {\n    for (var i = 0; i < d.length; i++) {\n      d[i] = self.decryptByte(d[i]);\n    }\n\n    this.push(d);\n    cb();\n  };\n\n  return stream;\n};\n\nmodule.exports = Decrypt;","map":null,"metadata":{},"sourceType":"script"}