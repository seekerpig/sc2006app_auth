{"ast":null,"code":"import _asyncToGenerator from \"/Users/chuayannaroj/Documents/SC2006 Projects/sc2006app_auth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport raw from '../KML/PLAYSG.kml';\nimport { insertFacilities } from './DatabaseController'; //var fs = require('fs');\n//var path = require('path');\n//this one connect to GovDataAPI, then call database controller to store data\n\nvar fs = require('fs');\n\nvar unzipper = require('unzipper');\n\nexport var readZip = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fs.createReadStream('https://geo.data.gov.sg/playsg/2014/04/17/kml/playsg.zip').pipe(unzipper.Parse()).on('entry', function (entry) {\n              var fileName = entry.path;\n              var type = entry.type; // 'Directory' or 'File'\n\n              console.log();\n\n              if (/\\/$/.test(fileName)) {\n                console.log('[DIR]', fileName, type);\n                return;\n              }\n\n              console.log('[FILE]', fileName, type); // TODO: probably also needs the security check\n\n              entry.pipe(process.stdout\n              /*fs.createWriteStream('output/path')*/\n              ); // NOTE: To ignore use entry.autodrain() instead of entry.pipe()\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function readZip() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar parseString = require('xml2js').parseString;\n\nexport var printSomething = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            fetch(raw).then(function (r) {\n              return r.text();\n            }).then(function (text) {\n              parseString(text, function (err, result) {\n                result.kml.Document[0].Folder[0].Placemark.forEach(function (element) {\n                  //console.log(element)\n                  // console.log(element);\n                  insertFacilities({\n                    id: element.$.id,\n                    name: element.name[0],\n                    coordinates: element.Point[0].coordinates[0]\n                  }); //insertFacilities({id:\"ID_0001\"});\n                });\n              }); //console.log('text decoded:', text);\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function printSomething() {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["raw","insertFacilities","fs","require","unzipper","readZip","createReadStream","pipe","Parse","on","entry","fileName","path","type","console","log","test","process","stdout","parseString","printSomething","fetch","then","r","text","err","result","kml","Document","Folder","Placemark","forEach","element","id","$","name","coordinates","Point"],"sources":["/Users/chuayannaroj/Documents/SC2006 Projects/sc2006app_auth/src/Control/APIController.js"],"sourcesContent":["\n\nimport raw from '../KML/PLAYSG.kml';\nimport { insertFacilities } from './DatabaseController';\n//var fs = require('fs');\n//var path = require('path');\n\n//this one connect to GovDataAPI, then call database controller to store data\n\nvar fs = require('fs');\nvar unzipper = require('unzipper');\n\nexport const readZip = async () =>{\nfs.createReadStream('https://geo.data.gov.sg/playsg/2014/04/17/kml/playsg.zip')\n  .pipe(unzipper.Parse())\n  .on('entry', function (entry) {\n    var fileName = entry.path;\n    var type = entry.type; // 'Directory' or 'File'\n\n    console.log();\n    if (/\\/$/.test(fileName)) {\n      console.log('[DIR]', fileName, type);\n      return;\n    }\n\n    console.log('[FILE]', fileName, type);\n\n    // TODO: probably also needs the security check\n\n    entry.pipe(process.stdout/*fs.createWriteStream('output/path')*/);\n    // NOTE: To ignore use entry.autodrain() instead of entry.pipe()\n  });\n}\nvar parseString = require('xml2js').parseString;\nexport const printSomething= async () =>{\nfetch(raw)\n  .then(r => r.text())\n  .then(text => {\n    parseString(text, function (err, result) {\n        result.kml.Document[0].Folder[0].Placemark.forEach(element => {\n            //console.log(element)\n           // console.log(element);\n            insertFacilities({id:element.$.id,name:element.name[0],coordinates:element.Point[0].coordinates[0]})\n              //insertFacilities({id:\"ID_0001\"});\n        })\n    });\n    //console.log('text decoded:', text);\n  });\n}\n"],"mappings":";;+CACA,oJ;;AACA,OAAOA,GAAP,MAAgB,mBAAhB;AACA,SAASC,gBAAT,QAAiC,sBAAjC,C,CACA;AACA;AAEA;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AAEA,OAAO,IAAME,OAAO;EAAA,sEAAG;IAAA;MAAA;QAAA;UAAA;YACvBH,EAAE,CAACI,gBAAH,CAAoB,0DAApB,EACGC,IADH,CACQH,QAAQ,CAACI,KAAT,EADR,EAEGC,EAFH,CAEM,OAFN,EAEe,UAAUC,KAAV,EAAiB;cAC5B,IAAIC,QAAQ,GAAGD,KAAK,CAACE,IAArB;cACA,IAAIC,IAAI,GAAGH,KAAK,CAACG,IAAjB,CAF4B,CAEL;;cAEvBC,OAAO,CAACC,GAAR;;cACA,IAAI,MAAMC,IAAN,CAAWL,QAAX,CAAJ,EAA0B;gBACxBG,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,QAArB,EAA+BE,IAA/B;gBACA;cACD;;cAEDC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,QAAtB,EAAgCE,IAAhC,EAV4B,CAY5B;;cAEAH,KAAK,CAACH,IAAN,CAAWU,OAAO,CAACC;cAAM;cAAzB,EAd4B,CAe5B;YACD,CAlBH;;UADuB;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAPb,OAAO;IAAA;EAAA;AAAA,GAAb;;AAqBP,IAAIc,WAAW,GAAGhB,OAAO,CAAC,QAAD,CAAP,CAAkBgB,WAApC;;AACA,OAAO,IAAMC,cAAc;EAAA,uEAAE;IAAA;MAAA;QAAA;UAAA;YAC7BC,KAAK,CAACrB,GAAD,CAAL,CACGsB,IADH,CACQ,UAAAC,CAAC;cAAA,OAAIA,CAAC,CAACC,IAAF,EAAJ;YAAA,CADT,EAEGF,IAFH,CAEQ,UAAAE,IAAI,EAAI;cACZL,WAAW,CAACK,IAAD,EAAO,UAAUC,GAAV,EAAeC,MAAf,EAAuB;gBACrCA,MAAM,CAACC,GAAP,CAAWC,QAAX,CAAoB,CAApB,EAAuBC,MAAvB,CAA8B,CAA9B,EAAiCC,SAAjC,CAA2CC,OAA3C,CAAmD,UAAAC,OAAO,EAAI;kBAC1D;kBACD;kBACC/B,gBAAgB,CAAC;oBAACgC,EAAE,EAACD,OAAO,CAACE,CAAR,CAAUD,EAAd;oBAAiBE,IAAI,EAACH,OAAO,CAACG,IAAR,CAAa,CAAb,CAAtB;oBAAsCC,WAAW,EAACJ,OAAO,CAACK,KAAR,CAAc,CAAd,EAAiBD,WAAjB,CAA6B,CAA7B;kBAAlD,CAAD,CAAhB,CAH0D,CAIxD;gBACL,CALD;cAMH,CAPU,CAAX,CADY,CASZ;YACD,CAZH;;UAD6B;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAF;;EAAA,gBAAdhB,cAAc;IAAA;EAAA;AAAA,GAApB"},"metadata":{},"sourceType":"module"}