{"ast":null,"code":"var Traverse = require('traverse');\n\nvar EventEmitter = require('events').EventEmitter;\n\nmodule.exports = Chainsaw;\n\nfunction Chainsaw(builder) {\n  var saw = Chainsaw.saw(builder, {});\n  var r = builder.call(saw.handlers, saw);\n  if (r !== undefined) saw.handlers = r;\n  saw.record();\n  return saw.chain();\n}\n\n;\n\nChainsaw.light = function ChainsawLight(builder) {\n  var saw = Chainsaw.saw(builder, {});\n  var r = builder.call(saw.handlers, saw);\n  if (r !== undefined) saw.handlers = r;\n  return saw.chain();\n};\n\nChainsaw.saw = function (builder, handlers) {\n  var saw = new EventEmitter();\n  saw.handlers = handlers;\n  saw.actions = [];\n\n  saw.chain = function () {\n    var ch = Traverse(saw.handlers).map(function (node) {\n      if (this.isRoot) return node;\n      var ps = this.path;\n\n      if (typeof node === 'function') {\n        this.update(function () {\n          saw.actions.push({\n            path: ps,\n            args: [].slice.call(arguments)\n          });\n          return ch;\n        });\n      }\n    });\n    process.nextTick(function () {\n      saw.emit('begin');\n      saw.next();\n    });\n    return ch;\n  };\n\n  saw.pop = function () {\n    return saw.actions.shift();\n  };\n\n  saw.next = function () {\n    var action = saw.pop();\n\n    if (!action) {\n      saw.emit('end');\n    } else if (!action.trap) {\n      var node = saw.handlers;\n      action.path.forEach(function (key) {\n        node = node[key];\n      });\n      node.apply(saw.handlers, action.args);\n    }\n  };\n\n  saw.nest = function (cb) {\n    var args = [].slice.call(arguments, 1);\n    var autonext = true;\n\n    if (typeof cb === 'boolean') {\n      var autonext = cb;\n      cb = args.shift();\n    }\n\n    var s = Chainsaw.saw(builder, {});\n    var r = builder.call(s.handlers, s);\n    if (r !== undefined) s.handlers = r; // If we are recording...\n\n    if (\"undefined\" !== typeof saw.step) {\n      // ... our children should, too\n      s.record();\n    }\n\n    cb.apply(s.chain(), args);\n    if (autonext !== false) s.on('end', saw.next);\n  };\n\n  saw.record = function () {\n    upgradeChainsaw(saw);\n  };\n\n  ['trap', 'down', 'jump'].forEach(function (method) {\n    saw[method] = function () {\n      throw new Error(\"To use the trap, down and jump features, please \" + \"call record() first to start recording actions.\");\n    };\n  });\n  return saw;\n};\n\nfunction upgradeChainsaw(saw) {\n  saw.step = 0; // override pop\n\n  saw.pop = function () {\n    return saw.actions[saw.step++];\n  };\n\n  saw.trap = function (name, cb) {\n    var ps = Array.isArray(name) ? name : [name];\n    saw.actions.push({\n      path: ps,\n      step: saw.step,\n      cb: cb,\n      trap: true\n    });\n  };\n\n  saw.down = function (name) {\n    var ps = (Array.isArray(name) ? name : [name]).join('/');\n    var i = saw.actions.slice(saw.step).map(function (x) {\n      if (x.trap && x.step <= saw.step) return false;\n      return x.path.join('/') == ps;\n    }).indexOf(true);\n    if (i >= 0) saw.step += i;else saw.step = saw.actions.length;\n    var act = saw.actions[saw.step - 1];\n\n    if (act && act.trap) {\n      // It's a trap!\n      saw.step = act.step;\n      act.cb();\n    } else saw.next();\n  };\n\n  saw.jump = function (step) {\n    saw.step = step;\n    saw.next();\n  };\n}\n\n;","map":null,"metadata":{},"sourceType":"script"}